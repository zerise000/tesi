// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="next_instr_next_instr,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.454000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=36,HLS_SYN_LUT=343,HLS_VERSION=2023_1}" *)

module next_instr (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cpu_registers_address0,
        cpu_registers_ce0,
        cpu_registers_we0,
        cpu_registers_d0,
        cpu_registers_q0,
        cpu_registers_address1,
        cpu_registers_ce1,
        cpu_registers_we1,
        cpu_registers_d1,
        cpu_registers_q1,
        cpu_memWrite,
        cpu_regWrite,
        cpu_branch,
        cpu_memToReg,
        cpu_memRead,
        cpu_ALUSrc,
        cpu_ALUOp_address0,
        cpu_ALUOp_ce0,
        cpu_ALUOp_we0,
        cpu_ALUOp_d0,
        cpu_ALUOp_q0,
        cpu_ALUOp_address1,
        cpu_ALUOp_ce1,
        cpu_ALUOp_we1,
        cpu_ALUOp_d1,
        cpu_ALUOp_q1,
        cpu_branch_op,
        cpu_instr,
        cpu_immediate,
        cpu_instr_in,
        cpu_ALU_signal,
        cpu_ALU_result,
        cpu_pc_i,
        cpu_pc_o,
        cpu_pc_o_ap_vld,
        sub_res
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] cpu_registers_address0;
output   cpu_registers_ce0;
output   cpu_registers_we0;
output  [63:0] cpu_registers_d0;
input  [63:0] cpu_registers_q0;
output  [4:0] cpu_registers_address1;
output   cpu_registers_ce1;
output   cpu_registers_we1;
output  [63:0] cpu_registers_d1;
input  [63:0] cpu_registers_q1;
input  [0:0] cpu_memWrite;
input  [0:0] cpu_regWrite;
input  [0:0] cpu_branch;
input  [0:0] cpu_memToReg;
input  [0:0] cpu_memRead;
input  [0:0] cpu_ALUSrc;
output  [0:0] cpu_ALUOp_address0;
output   cpu_ALUOp_ce0;
output   cpu_ALUOp_we0;
output  [0:0] cpu_ALUOp_d0;
input  [0:0] cpu_ALUOp_q0;
output  [0:0] cpu_ALUOp_address1;
output   cpu_ALUOp_ce1;
output   cpu_ALUOp_we1;
output  [0:0] cpu_ALUOp_d1;
input  [0:0] cpu_ALUOp_q1;
input  [7:0] cpu_branch_op;
input  [31:0] cpu_instr;
input  [63:0] cpu_immediate;
input  [31:0] cpu_instr_in;
input  [7:0] cpu_ALU_signal;
input  [63:0] cpu_ALU_result;
input  [15:0] cpu_pc_i;
output  [15:0] cpu_pc_o;
output   cpu_pc_o_ap_vld;
input  [63:0] sub_res;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg cpu_pc_o_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [15:0] trunc_ln19_fu_119_p1;
reg   [15:0] trunc_ln19_reg_262;
wire   [0:0] icmp_ln37_fu_161_p2;
reg   [0:0] icmp_ln37_reg_267;
wire   [15:0] select_ln23_2_fu_219_p3;
reg   [15:0] select_ln23_2_reg_272;
wire   [0:0] icmp_ln23_3_fu_227_p2;
reg   [0:0] icmp_ln23_3_reg_277;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln25_fu_123_p2;
wire   [0:0] tmp_fu_145_p3;
wire   [31:0] int_sub_fu_115_p1;
wire   [0:0] icmp_ln23_fu_167_p2;
wire   [0:0] and_ln23_fu_173_p2;
wire   [15:0] select_ln25_fu_129_p3;
wire   [0:0] icmp_ln23_1_fu_187_p2;
wire   [0:0] and_ln23_1_fu_193_p2;
wire   [15:0] select_ln29_fu_137_p3;
wire   [15:0] select_ln23_fu_179_p3;
wire   [0:0] icmp_ln23_2_fu_207_p2;
wire   [0:0] and_ln23_2_fu_213_p2;
wire   [15:0] select_ln33_fu_153_p3;
wire   [15:0] select_ln23_1_fu_199_p3;
wire   [0:0] and_ln23_3_fu_239_p2;
wire   [15:0] select_ln37_fu_233_p3;
wire   [15:0] incr_1_fu_243_p3;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln23_3_reg_277 <= icmp_ln23_3_fu_227_p2;
        icmp_ln37_reg_267 <= icmp_ln37_fu_161_p2;
        select_ln23_2_reg_272 <= select_ln23_2_fu_219_p3;
        trunc_ln19_reg_262 <= trunc_ln19_fu_119_p1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cpu_pc_o_ap_vld = 1'b1;
    end else begin
        cpu_pc_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln23_1_fu_193_p2 = (icmp_ln23_1_fu_187_p2 & cpu_branch);

assign and_ln23_2_fu_213_p2 = (icmp_ln23_2_fu_207_p2 & cpu_branch);

assign and_ln23_3_fu_239_p2 = (icmp_ln23_3_reg_277 & cpu_branch);

assign and_ln23_fu_173_p2 = (icmp_ln23_fu_167_p2 & cpu_branch);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign cpu_ALUOp_address0 = 1'd0;

assign cpu_ALUOp_address1 = 1'd0;

assign cpu_ALUOp_ce0 = 1'b0;

assign cpu_ALUOp_ce1 = 1'b0;

assign cpu_ALUOp_d0 = 1'd0;

assign cpu_ALUOp_d1 = 1'd0;

assign cpu_ALUOp_we0 = 1'b0;

assign cpu_ALUOp_we1 = 1'b0;

assign cpu_pc_o = (cpu_pc_i + incr_1_fu_243_p3);

assign cpu_registers_address0 = 5'd0;

assign cpu_registers_address1 = 5'd0;

assign cpu_registers_ce0 = 1'b0;

assign cpu_registers_ce1 = 1'b0;

assign cpu_registers_d0 = 64'd0;

assign cpu_registers_d1 = 64'd0;

assign cpu_registers_we0 = 1'b0;

assign cpu_registers_we1 = 1'b0;

assign icmp_ln23_1_fu_187_p2 = ((cpu_branch_op == 8'd1) ? 1'b1 : 1'b0);

assign icmp_ln23_2_fu_207_p2 = ((cpu_branch_op == 8'd4) ? 1'b1 : 1'b0);

assign icmp_ln23_3_fu_227_p2 = ((cpu_branch_op == 8'd5) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_167_p2 = ((cpu_branch_op == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_123_p2 = ((sub_res == 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_161_p2 = (($signed(int_sub_fu_115_p1) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign incr_1_fu_243_p3 = ((and_ln23_3_fu_239_p2[0:0] == 1'b1) ? select_ln37_fu_233_p3 : select_ln23_2_reg_272);

assign int_sub_fu_115_p1 = sub_res[31:0];

assign select_ln23_1_fu_199_p3 = ((and_ln23_1_fu_193_p2[0:0] == 1'b1) ? select_ln29_fu_137_p3 : select_ln23_fu_179_p3);

assign select_ln23_2_fu_219_p3 = ((and_ln23_2_fu_213_p2[0:0] == 1'b1) ? select_ln33_fu_153_p3 : select_ln23_1_fu_199_p3);

assign select_ln23_fu_179_p3 = ((and_ln23_fu_173_p2[0:0] == 1'b1) ? select_ln25_fu_129_p3 : 16'd4);

assign select_ln25_fu_129_p3 = ((icmp_ln25_fu_123_p2[0:0] == 1'b1) ? trunc_ln19_fu_119_p1 : 16'd4);

assign select_ln29_fu_137_p3 = ((icmp_ln25_fu_123_p2[0:0] == 1'b1) ? 16'd4 : trunc_ln19_fu_119_p1);

assign select_ln33_fu_153_p3 = ((tmp_fu_145_p3[0:0] == 1'b1) ? trunc_ln19_fu_119_p1 : 16'd4);

assign select_ln37_fu_233_p3 = ((icmp_ln37_reg_267[0:0] == 1'b1) ? trunc_ln19_reg_262 : 16'd4);

assign tmp_fu_145_p3 = sub_res[32'd31];

assign trunc_ln19_fu_119_p1 = cpu_immediate[15:0];

endmodule //next_instr
