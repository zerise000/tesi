-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity next_instr is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cpu_registers_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cpu_registers_ce0 : OUT STD_LOGIC;
    cpu_registers_we0 : OUT STD_LOGIC;
    cpu_registers_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    cpu_registers_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    cpu_registers_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    cpu_registers_ce1 : OUT STD_LOGIC;
    cpu_registers_we1 : OUT STD_LOGIC;
    cpu_registers_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    cpu_registers_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    cpu_memWrite : IN STD_LOGIC_VECTOR (0 downto 0);
    cpu_regWrite : IN STD_LOGIC_VECTOR (0 downto 0);
    cpu_branch : IN STD_LOGIC_VECTOR (0 downto 0);
    cpu_memToReg : IN STD_LOGIC_VECTOR (0 downto 0);
    cpu_memRead : IN STD_LOGIC_VECTOR (0 downto 0);
    cpu_ALUSrc : IN STD_LOGIC_VECTOR (0 downto 0);
    cpu_ALUOp_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    cpu_ALUOp_ce0 : OUT STD_LOGIC;
    cpu_ALUOp_we0 : OUT STD_LOGIC;
    cpu_ALUOp_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    cpu_ALUOp_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    cpu_ALUOp_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    cpu_ALUOp_ce1 : OUT STD_LOGIC;
    cpu_ALUOp_we1 : OUT STD_LOGIC;
    cpu_ALUOp_d1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    cpu_ALUOp_q1 : IN STD_LOGIC_VECTOR (0 downto 0);
    cpu_branch_op : IN STD_LOGIC_VECTOR (7 downto 0);
    cpu_instr : IN STD_LOGIC_VECTOR (31 downto 0);
    cpu_immediate : IN STD_LOGIC_VECTOR (63 downto 0);
    cpu_instr_in : IN STD_LOGIC_VECTOR (31 downto 0);
    cpu_ALU_signal : IN STD_LOGIC_VECTOR (7 downto 0);
    cpu_ALU_result : IN STD_LOGIC_VECTOR (63 downto 0);
    cpu_pc_i : IN STD_LOGIC_VECTOR (15 downto 0);
    cpu_pc_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    cpu_pc_o_ap_vld : OUT STD_LOGIC;
    sub_res : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of next_instr is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "next_instr_next_instr,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.454000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=36,HLS_SYN_LUT=343,HLS_VERSION=2023_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal trunc_ln19_fu_119_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln19_reg_262 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln37_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_267 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln23_2_fu_219_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln23_2_reg_272 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln23_3_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_3_reg_277 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln25_fu_123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_145_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal int_sub_fu_115_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln23_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln25_fu_129_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln23_1_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_1_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_fu_137_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln23_fu_179_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln23_2_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_2_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln33_fu_153_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln23_1_fu_199_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln23_3_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln37_fu_233_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal incr_1_fu_243_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln23_3_reg_277 <= icmp_ln23_3_fu_227_p2;
                icmp_ln37_reg_267 <= icmp_ln37_fu_161_p2;
                select_ln23_2_reg_272 <= select_ln23_2_fu_219_p3;
                trunc_ln19_reg_262 <= trunc_ln19_fu_119_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    and_ln23_1_fu_193_p2 <= (icmp_ln23_1_fu_187_p2 and cpu_branch);
    and_ln23_2_fu_213_p2 <= (icmp_ln23_2_fu_207_p2 and cpu_branch);
    and_ln23_3_fu_239_p2 <= (icmp_ln23_3_reg_277 and cpu_branch);
    and_ln23_fu_173_p2 <= (icmp_ln23_fu_167_p2 and cpu_branch);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cpu_ALUOp_address0 <= ap_const_lv1_0;
    cpu_ALUOp_address1 <= ap_const_lv1_0;
    cpu_ALUOp_ce0 <= ap_const_logic_0;
    cpu_ALUOp_ce1 <= ap_const_logic_0;
    cpu_ALUOp_d0 <= ap_const_lv1_0;
    cpu_ALUOp_d1 <= ap_const_lv1_0;
    cpu_ALUOp_we0 <= ap_const_logic_0;
    cpu_ALUOp_we1 <= ap_const_logic_0;
    cpu_pc_o <= std_logic_vector(unsigned(cpu_pc_i) + unsigned(incr_1_fu_243_p3));

    cpu_pc_o_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cpu_pc_o_ap_vld <= ap_const_logic_1;
        else 
            cpu_pc_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    cpu_registers_address0 <= ap_const_lv5_0;
    cpu_registers_address1 <= ap_const_lv5_0;
    cpu_registers_ce0 <= ap_const_logic_0;
    cpu_registers_ce1 <= ap_const_logic_0;
    cpu_registers_d0 <= ap_const_lv64_0;
    cpu_registers_d1 <= ap_const_lv64_0;
    cpu_registers_we0 <= ap_const_logic_0;
    cpu_registers_we1 <= ap_const_logic_0;
    icmp_ln23_1_fu_187_p2 <= "1" when (cpu_branch_op = ap_const_lv8_1) else "0";
    icmp_ln23_2_fu_207_p2 <= "1" when (cpu_branch_op = ap_const_lv8_4) else "0";
    icmp_ln23_3_fu_227_p2 <= "1" when (cpu_branch_op = ap_const_lv8_5) else "0";
    icmp_ln23_fu_167_p2 <= "1" when (cpu_branch_op = ap_const_lv8_0) else "0";
    icmp_ln25_fu_123_p2 <= "1" when (sub_res = ap_const_lv64_0) else "0";
    icmp_ln37_fu_161_p2 <= "1" when (signed(int_sub_fu_115_p1) > signed(ap_const_lv32_0)) else "0";
    incr_1_fu_243_p3 <= 
        select_ln37_fu_233_p3 when (and_ln23_3_fu_239_p2(0) = '1') else 
        select_ln23_2_reg_272;
    int_sub_fu_115_p1 <= sub_res(32 - 1 downto 0);
    select_ln23_1_fu_199_p3 <= 
        select_ln29_fu_137_p3 when (and_ln23_1_fu_193_p2(0) = '1') else 
        select_ln23_fu_179_p3;
    select_ln23_2_fu_219_p3 <= 
        select_ln33_fu_153_p3 when (and_ln23_2_fu_213_p2(0) = '1') else 
        select_ln23_1_fu_199_p3;
    select_ln23_fu_179_p3 <= 
        select_ln25_fu_129_p3 when (and_ln23_fu_173_p2(0) = '1') else 
        ap_const_lv16_4;
    select_ln25_fu_129_p3 <= 
        trunc_ln19_fu_119_p1 when (icmp_ln25_fu_123_p2(0) = '1') else 
        ap_const_lv16_4;
    select_ln29_fu_137_p3 <= 
        ap_const_lv16_4 when (icmp_ln25_fu_123_p2(0) = '1') else 
        trunc_ln19_fu_119_p1;
    select_ln33_fu_153_p3 <= 
        trunc_ln19_fu_119_p1 when (tmp_fu_145_p3(0) = '1') else 
        ap_const_lv16_4;
    select_ln37_fu_233_p3 <= 
        trunc_ln19_reg_262 when (icmp_ln37_reg_267(0) = '1') else 
        ap_const_lv16_4;
    tmp_fu_145_p3 <= sub_res(31 downto 31);
    trunc_ln19_fu_119_p1 <= cpu_immediate(16 - 1 downto 0);
end behav;
